/* tslint:disable */
/* eslint-disable */
/**
 * Pharmacy Prescription API
 * Pharmacy Prescription management system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkabac@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Medicine
 */
export interface Medicine {
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'medicineId': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'dosage': string;
    /**
     * 
     * @type {number}
     * @memberof Medicine
     */
    'quantityPrescribed': number;
    /**
     * 
     * @type {number}
     * @memberof Medicine
     */
    'quantityDispensed': number;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'dispenseDate': string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof Medicine
     */
    'unit'?: string;
}
/**
 * 
 * @export
 * @interface Prescription
 */
export interface Prescription {
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'patientName': string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'doctorName': string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'issuedDate': string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'validUntil': string;
    /**
     * 
     * @type {Array<Medicine>}
     * @memberof Prescription
     */
    'medicines': Array<Medicine>;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'instructions'?: string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'ambulanceId': string;
    /**
     * 
     * @type {string}
     * @memberof Prescription
     */
    'notes'?: string;
}

/**
 * PrescriptionsApi - axios parameter creator
 * @export
 */
export const PrescriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this endpoint to create a new prescription associated with an ambulance.
         * @summary Creates a new prescription
         * @param {string} ambulanceId The ID of the ambulance where the prescription was issued.
         * @param {Prescription} prescription The prescription to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrescription: async (ambulanceId: string, prescription: Prescription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('createPrescription', 'ambulanceId', ambulanceId)
            // verify required parameter 'prescription' is not null or undefined
            assertParamExists('createPrescription', 'prescription', prescription)
            const localVarPath = `/prescriptions/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(prescription, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to delete a specific prescription by its ID.
         * @summary Deletes a specific prescription
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription to delete.
         * @param {string} prescriptionId The ID of the prescription to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrescription: async (ambulanceId: string, prescriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('deletePrescription', 'ambulanceId', ambulanceId)
            // verify required parameter 'prescriptionId' is not null or undefined
            assertParamExists('deletePrescription', 'prescriptionId', prescriptionId)
            const localVarPath = `/prescriptions/{ambulanceId}/{prescriptionId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"prescriptionId"}}`, encodeURIComponent(String(prescriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * By using ambulanceId, you get the list of prescriptions issued by the ambulance
         * @summary Provides the list of prescriptions for an ambulance
         * @param {string} ambulanceId Pass the ID of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulancePrescriptions: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getAmbulancePrescriptions', 'ambulanceId', ambulanceId)
            const localVarPath = `/prescriptions/{ambulanceId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to retrieve details of a specific prescription by its ID and ambulanceId.
         * @summary Retrieves a specific prescription by ID
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
         * @param {string} prescriptionId The ID of the prescription to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrescriptionById: async (ambulanceId: string, prescriptionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getPrescriptionById', 'ambulanceId', ambulanceId)
            // verify required parameter 'prescriptionId' is not null or undefined
            assertParamExists('getPrescriptionById', 'prescriptionId', prescriptionId)
            const localVarPath = `/prescriptions/{ambulanceId}/{prescriptionId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"prescriptionId"}}`, encodeURIComponent(String(prescriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this endpoint to update details of a specific prescription.
         * @summary Updates a specific prescription
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
         * @param {string} prescriptionId The ID of the prescription to update.
         * @param {Prescription} prescription The updated prescription details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrescription: async (ambulanceId: string, prescriptionId: string, prescription: Prescription, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('updatePrescription', 'ambulanceId', ambulanceId)
            // verify required parameter 'prescriptionId' is not null or undefined
            assertParamExists('updatePrescription', 'prescriptionId', prescriptionId)
            // verify required parameter 'prescription' is not null or undefined
            assertParamExists('updatePrescription', 'prescription', prescription)
            const localVarPath = `/prescriptions/{ambulanceId}/{prescriptionId}`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)))
                .replace(`{${"prescriptionId"}}`, encodeURIComponent(String(prescriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(prescription, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrescriptionsApi - functional programming interface
 * @export
 */
export const PrescriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrescriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this endpoint to create a new prescription associated with an ambulance.
         * @summary Creates a new prescription
         * @param {string} ambulanceId The ID of the ambulance where the prescription was issued.
         * @param {Prescription} prescription The prescription to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPrescription(ambulanceId: string, prescription: Prescription, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPrescription(ambulanceId, prescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to delete a specific prescription by its ID.
         * @summary Deletes a specific prescription
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription to delete.
         * @param {string} prescriptionId The ID of the prescription to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePrescription(ambulanceId: string, prescriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePrescription(ambulanceId, prescriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * By using ambulanceId, you get the list of prescriptions issued by the ambulance
         * @summary Provides the list of prescriptions for an ambulance
         * @param {string} ambulanceId Pass the ID of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmbulancePrescriptions(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Prescription>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmbulancePrescriptions(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to retrieve details of a specific prescription by its ID and ambulanceId.
         * @summary Retrieves a specific prescription by ID
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
         * @param {string} prescriptionId The ID of the prescription to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrescriptionById(ambulanceId: string, prescriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Prescription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrescriptionById(ambulanceId, prescriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this endpoint to update details of a specific prescription.
         * @summary Updates a specific prescription
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
         * @param {string} prescriptionId The ID of the prescription to update.
         * @param {Prescription} prescription The updated prescription details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePrescription(ambulanceId: string, prescriptionId: string, prescription: Prescription, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePrescription(ambulanceId, prescriptionId, prescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrescriptionsApi - factory interface
 * @export
 */
export const PrescriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrescriptionsApiFp(configuration)
    return {
        /**
         * Use this endpoint to create a new prescription associated with an ambulance.
         * @summary Creates a new prescription
         * @param {string} ambulanceId The ID of the ambulance where the prescription was issued.
         * @param {Prescription} prescription The prescription to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPrescription(ambulanceId: string, prescription: Prescription, options?: any): AxiosPromise<Prescription> {
            return localVarFp.createPrescription(ambulanceId, prescription, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to delete a specific prescription by its ID.
         * @summary Deletes a specific prescription
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription to delete.
         * @param {string} prescriptionId The ID of the prescription to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePrescription(ambulanceId: string, prescriptionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePrescription(ambulanceId, prescriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * By using ambulanceId, you get the list of prescriptions issued by the ambulance
         * @summary Provides the list of prescriptions for an ambulance
         * @param {string} ambulanceId Pass the ID of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmbulancePrescriptions(ambulanceId: string, options?: any): AxiosPromise<Array<Prescription>> {
            return localVarFp.getAmbulancePrescriptions(ambulanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to retrieve details of a specific prescription by its ID and ambulanceId.
         * @summary Retrieves a specific prescription by ID
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
         * @param {string} prescriptionId The ID of the prescription to retrieve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrescriptionById(ambulanceId: string, prescriptionId: string, options?: any): AxiosPromise<Prescription> {
            return localVarFp.getPrescriptionById(ambulanceId, prescriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this endpoint to update details of a specific prescription.
         * @summary Updates a specific prescription
         * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
         * @param {string} prescriptionId The ID of the prescription to update.
         * @param {Prescription} prescription The updated prescription details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePrescription(ambulanceId: string, prescriptionId: string, prescription: Prescription, options?: any): AxiosPromise<void> {
            return localVarFp.updatePrescription(ambulanceId, prescriptionId, prescription, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PrescriptionsApi - interface
 * @export
 * @interface PrescriptionsApi
 */
export interface PrescriptionsApiInterface {
    /**
     * Use this endpoint to create a new prescription associated with an ambulance.
     * @summary Creates a new prescription
     * @param {string} ambulanceId The ID of the ambulance where the prescription was issued.
     * @param {Prescription} prescription The prescription to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApiInterface
     */
    createPrescription(ambulanceId: string, prescription: Prescription, options?: AxiosRequestConfig): AxiosPromise<Prescription>;

    /**
     * Use this endpoint to delete a specific prescription by its ID.
     * @summary Deletes a specific prescription
     * @param {string} ambulanceId The ID of the ambulance associated with the prescription to delete.
     * @param {string} prescriptionId The ID of the prescription to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApiInterface
     */
    deletePrescription(ambulanceId: string, prescriptionId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * By using ambulanceId, you get the list of prescriptions issued by the ambulance
     * @summary Provides the list of prescriptions for an ambulance
     * @param {string} ambulanceId Pass the ID of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApiInterface
     */
    getAmbulancePrescriptions(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<Prescription>>;

    /**
     * Use this endpoint to retrieve details of a specific prescription by its ID and ambulanceId.
     * @summary Retrieves a specific prescription by ID
     * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
     * @param {string} prescriptionId The ID of the prescription to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApiInterface
     */
    getPrescriptionById(ambulanceId: string, prescriptionId: string, options?: AxiosRequestConfig): AxiosPromise<Prescription>;

    /**
     * Use this endpoint to update details of a specific prescription.
     * @summary Updates a specific prescription
     * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
     * @param {string} prescriptionId The ID of the prescription to update.
     * @param {Prescription} prescription The updated prescription details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApiInterface
     */
    updatePrescription(ambulanceId: string, prescriptionId: string, prescription: Prescription, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PrescriptionsApi - object-oriented interface
 * @export
 * @class PrescriptionsApi
 * @extends {BaseAPI}
 */
export class PrescriptionsApi extends BaseAPI implements PrescriptionsApiInterface {
    /**
     * Use this endpoint to create a new prescription associated with an ambulance.
     * @summary Creates a new prescription
     * @param {string} ambulanceId The ID of the ambulance where the prescription was issued.
     * @param {Prescription} prescription The prescription to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApi
     */
    public createPrescription(ambulanceId: string, prescription: Prescription, options?: AxiosRequestConfig) {
        return PrescriptionsApiFp(this.configuration).createPrescription(ambulanceId, prescription, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to delete a specific prescription by its ID.
     * @summary Deletes a specific prescription
     * @param {string} ambulanceId The ID of the ambulance associated with the prescription to delete.
     * @param {string} prescriptionId The ID of the prescription to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApi
     */
    public deletePrescription(ambulanceId: string, prescriptionId: string, options?: AxiosRequestConfig) {
        return PrescriptionsApiFp(this.configuration).deletePrescription(ambulanceId, prescriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * By using ambulanceId, you get the list of prescriptions issued by the ambulance
     * @summary Provides the list of prescriptions for an ambulance
     * @param {string} ambulanceId Pass the ID of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApi
     */
    public getAmbulancePrescriptions(ambulanceId: string, options?: AxiosRequestConfig) {
        return PrescriptionsApiFp(this.configuration).getAmbulancePrescriptions(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to retrieve details of a specific prescription by its ID and ambulanceId.
     * @summary Retrieves a specific prescription by ID
     * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
     * @param {string} prescriptionId The ID of the prescription to retrieve.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApi
     */
    public getPrescriptionById(ambulanceId: string, prescriptionId: string, options?: AxiosRequestConfig) {
        return PrescriptionsApiFp(this.configuration).getPrescriptionById(ambulanceId, prescriptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this endpoint to update details of a specific prescription.
     * @summary Updates a specific prescription
     * @param {string} ambulanceId The ID of the ambulance associated with the prescription.
     * @param {string} prescriptionId The ID of the prescription to update.
     * @param {Prescription} prescription The updated prescription details.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrescriptionsApi
     */
    public updatePrescription(ambulanceId: string, prescriptionId: string, prescription: Prescription, options?: AxiosRequestConfig) {
        return PrescriptionsApiFp(this.configuration).updatePrescription(ambulanceId, prescriptionId, prescription, options).then((request) => request(this.axios, this.basePath));
    }
}


