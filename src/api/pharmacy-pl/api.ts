/* tslint:disable */
/* eslint-disable */
/**
 * Pharmacy Prescription List Api
 * Ambulance Waiting List management for Web-In-Cloud system
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xkabac@stuba.sk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * Describes disease, symptoms, or other reasons of patient   visit
 * @export
 * @interface Condition
 */
export interface Condition {
    /**
     * 
     * @type {string}
     * @memberof Condition
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof Condition
     */
    'code'?: string;
    /**
     * Link to encyclopedical explanation of the patient\'s condition
     * @type {string}
     * @memberof Condition
     */
    'reference'?: string;
    /**
     * 
     * @type {number}
     * @memberof Condition
     */
    'typicalDurationMinutes'?: number;
}
/**
 * 
 * @export
 * @interface PrescriptionListEntry
 */
export interface PrescriptionListEntry {
    /**
     * Unique id of the entry in this waiting list
     * @type {string}
     * @memberof PrescriptionListEntry
     */
    'id': string;
    /**
     * Name of patient in waiting list
     * @type {string}
     * @memberof PrescriptionListEntry
     */
    'name'?: string;
    /**
     * Unique identifier of the patient known to Web-In-Cloud system
     * @type {string}
     * @memberof PrescriptionListEntry
     */
    'patientId': string;
    /**
     * Timestamp since when the patient entered the waiting list
     * @type {string}
     * @memberof PrescriptionListEntry
     */
    'waitingSince': string;
    /**
     * Estimated time of entering ambulance. Ignored on post.
     * @type {string}
     * @memberof PrescriptionListEntry
     */
    'estimatedStart'?: string;
    /**
     * Estimated duration of ambulance visit. If not provided then it will be computed based on condition and ambulance settings
     * @type {number}
     * @memberof PrescriptionListEntry
     */
    'estimatedDurationMinutes': number;
    /**
     * 
     * @type {Condition}
     * @memberof PrescriptionListEntry
     */
    'condition'?: Condition;
}

/**
 * PharmacyPrescriptionListApi - axios parameter creator
 * @export
 */
export const PharmacyPrescriptionListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * By using ambulanceId you get list of entries in pharmacy prescription list
         * @summary Provides the pharmacy prescription list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrescriptionListEntries: async (ambulanceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ambulanceId' is not null or undefined
            assertParamExists('getPrescriptionListEntries', 'ambulanceId', ambulanceId)
            const localVarPath = `/prescription-list/{ambulanceId}/entries`
                .replace(`{${"ambulanceId"}}`, encodeURIComponent(String(ambulanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PharmacyPrescriptionListApi - functional programming interface
 * @export
 */
export const PharmacyPrescriptionListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PharmacyPrescriptionListApiAxiosParamCreator(configuration)
    return {
        /**
         * By using ambulanceId you get list of entries in pharmacy prescription list
         * @summary Provides the pharmacy prescription list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPrescriptionListEntries(ambulanceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrescriptionListEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPrescriptionListEntries(ambulanceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PharmacyPrescriptionListApi - factory interface
 * @export
 */
export const PharmacyPrescriptionListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PharmacyPrescriptionListApiFp(configuration)
    return {
        /**
         * By using ambulanceId you get list of entries in pharmacy prescription list
         * @summary Provides the pharmacy prescription list
         * @param {string} ambulanceId pass the id of the particular ambulance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPrescriptionListEntries(ambulanceId: string, options?: any): AxiosPromise<Array<PrescriptionListEntry>> {
            return localVarFp.getPrescriptionListEntries(ambulanceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PharmacyPrescriptionListApi - interface
 * @export
 * @interface PharmacyPrescriptionListApi
 */
export interface PharmacyPrescriptionListApiInterface {
    /**
     * By using ambulanceId you get list of entries in pharmacy prescription list
     * @summary Provides the pharmacy prescription list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyPrescriptionListApiInterface
     */
    getPrescriptionListEntries(ambulanceId: string, options?: AxiosRequestConfig): AxiosPromise<Array<PrescriptionListEntry>>;

}

/**
 * PharmacyPrescriptionListApi - object-oriented interface
 * @export
 * @class PharmacyPrescriptionListApi
 * @extends {BaseAPI}
 */
export class PharmacyPrescriptionListApi extends BaseAPI implements PharmacyPrescriptionListApiInterface {
    /**
     * By using ambulanceId you get list of entries in pharmacy prescription list
     * @summary Provides the pharmacy prescription list
     * @param {string} ambulanceId pass the id of the particular ambulance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PharmacyPrescriptionListApi
     */
    public getPrescriptionListEntries(ambulanceId: string, options?: AxiosRequestConfig) {
        return PharmacyPrescriptionListApiFp(this.configuration).getPrescriptionListEntries(ambulanceId, options).then((request) => request(this.axios, this.basePath));
    }
}


